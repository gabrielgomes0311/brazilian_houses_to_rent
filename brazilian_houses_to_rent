{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Estatísticas descritivas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.1 Exploração dos dados e correções"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>area</th>\n",
       "      <th>rooms</th>\n",
       "      <th>bathroom</th>\n",
       "      <th>parking spaces</th>\n",
       "      <th>floor</th>\n",
       "      <th>animal</th>\n",
       "      <th>furniture</th>\n",
       "      <th>hoa (R$)</th>\n",
       "      <th>rent amount (R$)</th>\n",
       "      <th>property tax (R$)</th>\n",
       "      <th>fire insurance (R$)</th>\n",
       "      <th>total (R$)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>70</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>acept</td>\n",
       "      <td>furnished</td>\n",
       "      <td>2065</td>\n",
       "      <td>3300</td>\n",
       "      <td>211</td>\n",
       "      <td>42</td>\n",
       "      <td>5618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>320</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>acept</td>\n",
       "      <td>not furnished</td>\n",
       "      <td>1200</td>\n",
       "      <td>4960</td>\n",
       "      <td>1750</td>\n",
       "      <td>63</td>\n",
       "      <td>7973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>80</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>acept</td>\n",
       "      <td>not furnished</td>\n",
       "      <td>1000</td>\n",
       "      <td>2800</td>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>3841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>acept</td>\n",
       "      <td>not furnished</td>\n",
       "      <td>270</td>\n",
       "      <td>1112</td>\n",
       "      <td>22</td>\n",
       "      <td>17</td>\n",
       "      <td>1421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>not acept</td>\n",
       "      <td>not furnished</td>\n",
       "      <td>0</td>\n",
       "      <td>800</td>\n",
       "      <td>25</td>\n",
       "      <td>11</td>\n",
       "      <td>836</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           city  area  rooms  bathroom  parking spaces floor     animal  \\\n",
       "0     São Paulo    70      2         1               1     7      acept   \n",
       "1     São Paulo   320      4         4               0    20      acept   \n",
       "2  Porto Alegre    80      1         1               1     6      acept   \n",
       "3  Porto Alegre    51      2         1               0     2      acept   \n",
       "4     São Paulo    25      1         1               0     1  not acept   \n",
       "\n",
       "       furniture  hoa (R$)  rent amount (R$)  property tax (R$)  \\\n",
       "0      furnished      2065              3300                211   \n",
       "1  not furnished      1200              4960               1750   \n",
       "2  not furnished      1000              2800                  0   \n",
       "3  not furnished       270              1112                 22   \n",
       "4  not furnished         0               800                 25   \n",
       "\n",
       "   fire insurance (R$)  total (R$)  \n",
       "0                   42        5618  \n",
       "1                   63        7973  \n",
       "2                   41        3841  \n",
       "3                   17        1421  \n",
       "4                   11         836  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dados de 2020, retirados do site Kaggle\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import statsmodels.api as sm\n",
    "import statistics\n",
    "from scipy import stats\n",
    "\n",
    "df = pd.read_csv('Dados/Kaggle/brazil_houses_to_rent_v2.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10692, 13)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vrificando a dimensão do data frame\n",
    "\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cidade</th>\n",
       "      <th>area</th>\n",
       "      <th>quartos</th>\n",
       "      <th>banheiros</th>\n",
       "      <th>vagas_estacionamento</th>\n",
       "      <th>andar</th>\n",
       "      <th>animal</th>\n",
       "      <th>mobiliado</th>\n",
       "      <th>condominio</th>\n",
       "      <th>aluguel</th>\n",
       "      <th>IPTU</th>\n",
       "      <th>seguro_incendio</th>\n",
       "      <th>valor_total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>70</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>acept</td>\n",
       "      <td>furnished</td>\n",
       "      <td>2065</td>\n",
       "      <td>3300</td>\n",
       "      <td>211</td>\n",
       "      <td>42</td>\n",
       "      <td>5618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>320</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>acept</td>\n",
       "      <td>not furnished</td>\n",
       "      <td>1200</td>\n",
       "      <td>4960</td>\n",
       "      <td>1750</td>\n",
       "      <td>63</td>\n",
       "      <td>7973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>80</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>acept</td>\n",
       "      <td>not furnished</td>\n",
       "      <td>1000</td>\n",
       "      <td>2800</td>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>3841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>acept</td>\n",
       "      <td>not furnished</td>\n",
       "      <td>270</td>\n",
       "      <td>1112</td>\n",
       "      <td>22</td>\n",
       "      <td>17</td>\n",
       "      <td>1421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>not acept</td>\n",
       "      <td>not furnished</td>\n",
       "      <td>0</td>\n",
       "      <td>800</td>\n",
       "      <td>25</td>\n",
       "      <td>11</td>\n",
       "      <td>836</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         cidade  area  quartos  banheiros  vagas_estacionamento andar  \\\n",
       "0     São Paulo    70        2          1                     1     7   \n",
       "1     São Paulo   320        4          4                     0    20   \n",
       "2  Porto Alegre    80        1          1                     1     6   \n",
       "3  Porto Alegre    51        2          1                     0     2   \n",
       "4     São Paulo    25        1          1                     0     1   \n",
       "\n",
       "      animal      mobiliado  condominio  aluguel  IPTU  seguro_incendio  \\\n",
       "0      acept      furnished        2065     3300   211               42   \n",
       "1      acept  not furnished        1200     4960  1750               63   \n",
       "2      acept  not furnished        1000     2800     0               41   \n",
       "3      acept  not furnished         270     1112    22               17   \n",
       "4  not acept  not furnished           0      800    25               11   \n",
       "\n",
       "   valor_total  \n",
       "0         5618  \n",
       "1         7973  \n",
       "2         3841  \n",
       "3         1421  \n",
       "4          836  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Renomear as colunas para melhorar a compreensão e facilitar slicing\n",
    "\n",
    "df = df.rename(columns = {'city':'cidade','rooms':'quartos','bathroom':'banheiros','parking spaces':'vagas_estacionamento',\\\n",
    "                          'floor':'andar','furniture':'mobiliado','hoa (R$)':'condominio', 'rent amount (R$)': 'aluguel',\\\n",
    "                          'property tax (R$)':'IPTU','fire insurance (R$)': 'seguro_incendio', 'total (R$)':'valor_total'})\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10692 entries, 0 to 10691\n",
      "Data columns (total 13 columns):\n",
      "cidade                  10692 non-null object\n",
      "area                    10692 non-null int64\n",
      "quartos                 10692 non-null int64\n",
      "banheiros               10692 non-null int64\n",
      "vagas_estacionamento    10692 non-null int64\n",
      "andar                   10692 non-null object\n",
      "animal                  10692 non-null object\n",
      "mobiliado               10692 non-null object\n",
      "condominio              10692 non-null int64\n",
      "aluguel                 10692 non-null int64\n",
      "IPTU                    10692 non-null int64\n",
      "seguro_incendio         10692 non-null int64\n",
      "valor_total             10692 non-null int64\n",
      "dtypes: int64(9), object(4)\n",
      "memory usage: 1.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()\n",
    "\n",
    "# Sem objetos nulos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area</th>\n",
       "      <th>quartos</th>\n",
       "      <th>banheiros</th>\n",
       "      <th>vagas_estacionamento</th>\n",
       "      <th>condominio</th>\n",
       "      <th>aluguel</th>\n",
       "      <th>IPTU</th>\n",
       "      <th>seguro_incendio</th>\n",
       "      <th>valor_total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>10692.000000</td>\n",
       "      <td>10692.000000</td>\n",
       "      <td>10692.000000</td>\n",
       "      <td>10692.000000</td>\n",
       "      <td>1.069200e+04</td>\n",
       "      <td>10692.000000</td>\n",
       "      <td>10692.000000</td>\n",
       "      <td>10692.000000</td>\n",
       "      <td>1.069200e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>149.217920</td>\n",
       "      <td>2.506079</td>\n",
       "      <td>2.236813</td>\n",
       "      <td>1.609147</td>\n",
       "      <td>1.174022e+03</td>\n",
       "      <td>3896.247194</td>\n",
       "      <td>366.704358</td>\n",
       "      <td>53.300879</td>\n",
       "      <td>5.490487e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>537.016942</td>\n",
       "      <td>1.171266</td>\n",
       "      <td>1.407198</td>\n",
       "      <td>1.589521</td>\n",
       "      <td>1.559231e+04</td>\n",
       "      <td>3408.545518</td>\n",
       "      <td>3107.832321</td>\n",
       "      <td>47.768031</td>\n",
       "      <td>1.648473e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>450.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.990000e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.700000e+02</td>\n",
       "      <td>1530.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>2.061750e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.600000e+02</td>\n",
       "      <td>2661.000000</td>\n",
       "      <td>125.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>3.581500e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>182.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.237500e+03</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>375.000000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>6.768000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>46335.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>1.117000e+06</td>\n",
       "      <td>45000.000000</td>\n",
       "      <td>313700.000000</td>\n",
       "      <td>677.000000</td>\n",
       "      <td>1.120000e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               area       quartos     banheiros  vagas_estacionamento  \\\n",
       "count  10692.000000  10692.000000  10692.000000          10692.000000   \n",
       "mean     149.217920      2.506079      2.236813              1.609147   \n",
       "std      537.016942      1.171266      1.407198              1.589521   \n",
       "min       11.000000      1.000000      1.000000              0.000000   \n",
       "25%       56.000000      2.000000      1.000000              0.000000   \n",
       "50%       90.000000      2.000000      2.000000              1.000000   \n",
       "75%      182.000000      3.000000      3.000000              2.000000   \n",
       "max    46335.000000     13.000000     10.000000             12.000000   \n",
       "\n",
       "         condominio       aluguel           IPTU  seguro_incendio  \\\n",
       "count  1.069200e+04  10692.000000   10692.000000     10692.000000   \n",
       "mean   1.174022e+03   3896.247194     366.704358        53.300879   \n",
       "std    1.559231e+04   3408.545518    3107.832321        47.768031   \n",
       "min    0.000000e+00    450.000000       0.000000         3.000000   \n",
       "25%    1.700000e+02   1530.000000      38.000000        21.000000   \n",
       "50%    5.600000e+02   2661.000000     125.000000        36.000000   \n",
       "75%    1.237500e+03   5000.000000     375.000000        68.000000   \n",
       "max    1.117000e+06  45000.000000  313700.000000       677.000000   \n",
       "\n",
       "        valor_total  \n",
       "count  1.069200e+04  \n",
       "mean   5.490487e+03  \n",
       "std    1.648473e+04  \n",
       "min    4.990000e+02  \n",
       "25%    2.061750e+03  \n",
       "50%    3.581500e+03  \n",
       "75%    6.768000e+03  \n",
       "max    1.120000e+06  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()\n",
    "\n",
    "# Média da área tem um desvio padrao maior do que a média, vamos verificar a distribuição dos ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "São Paulo         0.550599\n",
       "Rio de Janeiro    0.140385\n",
       "Belo Horizonte    0.117658\n",
       "Porto Alegre      0.111579\n",
       "Campinas          0.079779\n",
       "Name: cidade, dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Analisando a distribuição por cidade e verificando se nao há duplicatas no estilo 'São Paulo' e 'são paulo'\n",
    "\n",
    "df.cidade.value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-      2461\n",
       "1      1081\n",
       "2       985\n",
       "3       931\n",
       "4       748\n",
       "5       600\n",
       "6       539\n",
       "7       497\n",
       "8       490\n",
       "9       369\n",
       "10      357\n",
       "11      303\n",
       "12      257\n",
       "13      200\n",
       "14      170\n",
       "15      147\n",
       "16      109\n",
       "17       96\n",
       "18       75\n",
       "19       53\n",
       "20       44\n",
       "21       42\n",
       "25       25\n",
       "23       25\n",
       "22       24\n",
       "26       20\n",
       "24       19\n",
       "27        8\n",
       "28        6\n",
       "29        5\n",
       "32        2\n",
       "51        1\n",
       "46        1\n",
       "35        1\n",
       "301       1\n",
       "Name: andar, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Coluna 'andar'\n",
    "\n",
    "df.andar.value_counts()\n",
    "\n",
    "# Considerando que imóveis sem sinalização de andar, iremos considerar que o sinal '-' é para casas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sem andar\n",
      "area                     231.622105\n",
      "quartos                    3.054043\n",
      "banheiros                  2.826493\n",
      "vagas_estacionamento       2.428281\n",
      "condominio               134.710687\n",
      "aluguel                 4946.346201\n",
      "IPTU                     440.172288\n",
      "seguro_incendio           76.196262\n",
      "valor_total             5597.558716\n",
      "dtype: float64\n",
      "\n",
      "\n",
      "Com andar\n",
      "area                     124.579759\n",
      "quartos                    2.342243\n",
      "banheiros                  2.060503\n",
      "vagas_estacionamento       1.364233\n",
      "condominio              1484.766978\n",
      "aluguel                 3582.276394\n",
      "IPTU                     344.738063\n",
      "seguro_incendio           46.455352\n",
      "valor_total             5458.473454\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Visualizando as diferenças entre os imóveis com e sem andar assinalado\n",
    "\n",
    "print('Sem andar')\n",
    "print(df[df.andar == '-'].mean())\n",
    "print('\\n')\n",
    "print('Com andar')\n",
    "print(df[df.andar != '-'].mean())\n",
    "\n",
    "df_casa = df[df.andar == '-']\n",
    "df = df[df.andar != '-']\n",
    "\n",
    "# É provável que os imóveis sem andar assinalado, por terem uma área média maior, serem casas térreas.\\\n",
    "# Vamos separar os imóveis que sabemos serem apartamentos, dos outros imóveis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         7\n",
       "1        20\n",
       "2         6\n",
       "3         2\n",
       "4         1\n",
       "         ..\n",
       "10686     8\n",
       "10687     5\n",
       "10688    17\n",
       "10689     8\n",
       "10690     8\n",
       "Name: andar, Length: 8231, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tranformando os valores da coluna 'andar' de objetos para números inteiros\n",
    "\n",
    "df.andar.astype('int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cidade</th>\n",
       "      <th>area</th>\n",
       "      <th>quartos</th>\n",
       "      <th>banheiros</th>\n",
       "      <th>vagas_estacionamento</th>\n",
       "      <th>andar</th>\n",
       "      <th>animal</th>\n",
       "      <th>mobiliado</th>\n",
       "      <th>condominio</th>\n",
       "      <th>aluguel</th>\n",
       "      <th>IPTU</th>\n",
       "      <th>seguro_incendio</th>\n",
       "      <th>valor_total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>70</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2065</td>\n",
       "      <td>3300</td>\n",
       "      <td>211</td>\n",
       "      <td>42</td>\n",
       "      <td>5618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>320</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1200</td>\n",
       "      <td>4960</td>\n",
       "      <td>1750</td>\n",
       "      <td>63</td>\n",
       "      <td>7973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>80</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>2800</td>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>3841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>270</td>\n",
       "      <td>1112</td>\n",
       "      <td>22</td>\n",
       "      <td>17</td>\n",
       "      <td>1421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>800</td>\n",
       "      <td>25</td>\n",
       "      <td>11</td>\n",
       "      <td>836</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         cidade  area  quartos  banheiros  vagas_estacionamento andar  animal  \\\n",
       "0     São Paulo    70        2          1                     1     7       1   \n",
       "1     São Paulo   320        4          4                     0    20       1   \n",
       "2  Porto Alegre    80        1          1                     1     6       1   \n",
       "3  Porto Alegre    51        2          1                     0     2       1   \n",
       "4     São Paulo    25        1          1                     0     1       0   \n",
       "\n",
       "   mobiliado  condominio  aluguel  IPTU  seguro_incendio  valor_total  \n",
       "0          1        2065     3300   211               42         5618  \n",
       "1          0        1200     4960  1750               63         7973  \n",
       "2          0        1000     2800     0               41         3841  \n",
       "3          0         270     1112    22               17         1421  \n",
       "4          0           0      800    25               11          836  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trocando os valores, de palavras para números, das colunas 'animal' e 'mobiliado', para trabalhar os dados\n",
    "\n",
    "df.replace({'animal':{'acept': 1, 'not acept': 0}, 'mobiliado':{'furnished': 1, 'not furnished': 0}}, inplace=True)\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area</th>\n",
       "      <th>quartos</th>\n",
       "      <th>banheiros</th>\n",
       "      <th>vagas_estacionamento</th>\n",
       "      <th>animal</th>\n",
       "      <th>mobiliado</th>\n",
       "      <th>condominio</th>\n",
       "      <th>aluguel</th>\n",
       "      <th>IPTU</th>\n",
       "      <th>seguro_incendio</th>\n",
       "      <th>valor_total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cidade</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Belo Horizonte</td>\n",
       "      <td>161283</td>\n",
       "      <td>2533</td>\n",
       "      <td>1990</td>\n",
       "      <td>1514</td>\n",
       "      <td>655</td>\n",
       "      <td>133</td>\n",
       "      <td>2911491</td>\n",
       "      <td>2700118</td>\n",
       "      <td>232262</td>\n",
       "      <td>36240</td>\n",
       "      <td>5880669</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Campinas</td>\n",
       "      <td>70311</td>\n",
       "      <td>1386</td>\n",
       "      <td>1101</td>\n",
       "      <td>767</td>\n",
       "      <td>515</td>\n",
       "      <td>97</td>\n",
       "      <td>480526</td>\n",
       "      <td>1257070</td>\n",
       "      <td>72697</td>\n",
       "      <td>16158</td>\n",
       "      <td>1826462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>83382</td>\n",
       "      <td>1975</td>\n",
       "      <td>1563</td>\n",
       "      <td>863</td>\n",
       "      <td>837</td>\n",
       "      <td>274</td>\n",
       "      <td>560623</td>\n",
       "      <td>2038635</td>\n",
       "      <td>102283</td>\n",
       "      <td>30251</td>\n",
       "      <td>2731810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>138859</td>\n",
       "      <td>3065</td>\n",
       "      <td>2396</td>\n",
       "      <td>1010</td>\n",
       "      <td>1112</td>\n",
       "      <td>393</td>\n",
       "      <td>1600418</td>\n",
       "      <td>4428215</td>\n",
       "      <td>357793</td>\n",
       "      <td>57360</td>\n",
       "      <td>6443802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>São Paulo</td>\n",
       "      <td>571581</td>\n",
       "      <td>10320</td>\n",
       "      <td>9910</td>\n",
       "      <td>7075</td>\n",
       "      <td>3204</td>\n",
       "      <td>1355</td>\n",
       "      <td>6668059</td>\n",
       "      <td>19061679</td>\n",
       "      <td>2072504</td>\n",
       "      <td>242365</td>\n",
       "      <td>28045952</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  area  quartos  banheiros  vagas_estacionamento  animal  \\\n",
       "cidade                                                                     \n",
       "Belo Horizonte  161283     2533       1990                  1514     655   \n",
       "Campinas         70311     1386       1101                   767     515   \n",
       "Porto Alegre     83382     1975       1563                   863     837   \n",
       "Rio de Janeiro  138859     3065       2396                  1010    1112   \n",
       "São Paulo       571581    10320       9910                  7075    3204   \n",
       "\n",
       "                mobiliado  condominio   aluguel     IPTU  seguro_incendio  \\\n",
       "cidade                                                                      \n",
       "Belo Horizonte        133     2911491   2700118   232262            36240   \n",
       "Campinas               97      480526   1257070    72697            16158   \n",
       "Porto Alegre          274      560623   2038635   102283            30251   \n",
       "Rio de Janeiro        393     1600418   4428215   357793            57360   \n",
       "São Paulo            1355     6668059  19061679  2072504           242365   \n",
       "\n",
       "                valor_total  \n",
       "cidade                       \n",
       "Belo Horizonte      5880669  \n",
       "Campinas            1826462  \n",
       "Porto Alegre        2731810  \n",
       "Rio de Janeiro      6443802  \n",
       "São Paulo          28045952  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Agregando as colunas por cidade\n",
    "\n",
    "df.groupby(by='cidade').sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.2 Aluguel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80% dos apartamentos tem um aluguel na faixa de 460 a 5100 reais\n",
      "\n",
      "\n",
      "count     8231.000000\n",
      "mean      3582.276394\n",
      "std       3138.226949\n",
      "min        460.000000\n",
      "25%       1500.000000\n",
      "50%       2500.000000\n",
      "75%       4405.000000\n",
      "max      24000.000000\n",
      "Name: aluguel, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Calculando a faixa de preço que contém 80% dos apartamentos\n",
    "\n",
    "    \n",
    "oitenta_pct = int(round(len(df.aluguel)*0.80, 0))\n",
    "\n",
    "maxi = max(df.aluguel.sort_values()[: oitenta_pct])\n",
    "\n",
    "print ('80% dos apartamentos tem um aluguel na faixa de', min(df.aluguel), 'a', maxi, 'reais')\n",
    "\n",
    "print(\"\\n\")\n",
    "print(df.aluguel.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mediana:  2500.0\n"
     ]
    }
   ],
   "source": [
    "# Visualização da disbruição de aluguéis dos apartamentos em um histograma \n",
    "\n",
    "plt.hist(df.aluguel, bins=50)\n",
    "plt.axvline(df.aluguel.median(), color='k', linestyle='dashed', linewidth=1, label='50%')\n",
    "plt.axvline(maxi, color='r', linestyle='dashed', linewidth=1, label='80%')\n",
    "plt.legend(loc='upper right')\n",
    "plt.xlabel('Valor aluguel')\n",
    "plt.ylabel('Nº de imóveis')\n",
    "plt.title('Distribuição dos aluguéis')\n",
    "plt.xlim(right=16000)\n",
    "plt.show()\n",
    "\n",
    "\n",
    "print('Mediana: ', df.aluguel.median())\n",
    "# Claramnte a distribuição não é normal, se aproximando mais de uma distribuição exponencial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"4\" halign=\"left\">aluguel</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>std</th>\n",
       "      <th>len</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cidade</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>São Paulo</td>\n",
       "      <td>4460.959279</td>\n",
       "      <td>3230</td>\n",
       "      <td>3423.462162</td>\n",
       "      <td>4273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>3176.624821</td>\n",
       "      <td>2300</td>\n",
       "      <td>2663.961508</td>\n",
       "      <td>1394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Belo Horizonte</td>\n",
       "      <td>2947.727074</td>\n",
       "      <td>1800</td>\n",
       "      <td>2952.030907</td>\n",
       "      <td>916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>2040.675676</td>\n",
       "      <td>1600</td>\n",
       "      <td>1689.417154</td>\n",
       "      <td>999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Campinas</td>\n",
       "      <td>1936.933744</td>\n",
       "      <td>1275</td>\n",
       "      <td>1862.710970</td>\n",
       "      <td>649</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    aluguel                          \n",
       "                       mean median          std   len\n",
       "cidade                                               \n",
       "São Paulo       4460.959279   3230  3423.462162  4273\n",
       "Rio de Janeiro  3176.624821   2300  2663.961508  1394\n",
       "Belo Horizonte  2947.727074   1800  2952.030907   916\n",
       "Porto Alegre    2040.675676   1600  1689.417154   999\n",
       "Campinas        1936.933744   1275  1862.710970   649"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Visualizando as diferenças de médias de aluguel por cidade\n",
    "\n",
    "cidades_df = df.groupby(by='cidade').agg({'aluguel': [np.mean, np.median, np.std, len]}).sort_values(by=[('aluguel',   'mean')], ascending=False)\n",
    "cidades_df\n",
    "\n",
    "# São Paulo possui o aluguel mais caro e Campinas possui o mas barato. Podemos porém, afirmar que o Rio é mais caro que BH?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre',\n",
       "       'Campinas'],\n",
       "      dtype='object', name='cidade')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Criando uma lista de Ordenando as cidades por valor de aluguel\n",
    "\n",
    "cidades_por_aluguel = cidades_df.index\n",
    "cidades_por_aluguel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0.5, 1.0, 'Distribuição dos aluguéis por cidade')]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Distribuição dos aluguéis por cidade\n",
    "\n",
    "ax = sns.boxplot(x='cidade', y='aluguel', data=df, order=cidades_por_aluguel)\n",
    "ax.set(title='Distribuição dos aluguéis por cidade')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.3 Área"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80% dos apartamentos tem a área na faixa de 11 a 168 metros\n",
      "\n",
      "\n",
      "count     8231.000000\n",
      "mean       124.579759\n",
      "std        601.034331\n",
      "min         11.000000\n",
      "25%         54.000000\n",
      "50%         80.000000\n",
      "75%        141.000000\n",
      "max      46335.000000\n",
      "Name: area, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Calcular a faixa de área que contém 80% dos imóveis\n",
    "\n",
    "oitenta_pct_area = int(round(len(df.area)*0.80, 0))\n",
    "\n",
    "maxi_area = max(df.area.sort_values()[: oitenta_pct_area])\n",
    "\n",
    "print ('80% dos apartamentos tem a área na faixa de', min(df.area), 'a', maxi_area, 'metros')\n",
    "\n",
    "print('\\n')\n",
    "print(df.area.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Distribuição da área dos apartamentos em um histograma \n",
    "\n",
    "plt.hist(df.area, bins=100)\n",
    "plt.xlabel('Área')\n",
    "plt.ylabel('Nº de imóveis')\n",
    "plt.title('Distribuição das áreas')\n",
    "plt.show()\n",
    "\n",
    "# Algo está errado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1546ba02508>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Distribuição da área dos apartamentos por cidade\n",
    "\n",
    "sns.boxplot(x='cidade', y='area', data=df)\n",
    "\n",
    "# Outliers estão prejudicando a visualização"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cidade</th>\n",
       "      <th>area</th>\n",
       "      <th>quartos</th>\n",
       "      <th>banheiros</th>\n",
       "      <th>vagas_estacionamento</th>\n",
       "      <th>andar</th>\n",
       "      <th>animal</th>\n",
       "      <th>mobiliado</th>\n",
       "      <th>condominio</th>\n",
       "      <th>aluguel</th>\n",
       "      <th>IPTU</th>\n",
       "      <th>seguro_incendio</th>\n",
       "      <th>valor_total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2397</td>\n",
       "      <td>Belo Horizonte</td>\n",
       "      <td>46335</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>960</td>\n",
       "      <td>8500</td>\n",
       "      <td>646</td>\n",
       "      <td>114</td>\n",
       "      <td>10220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5915</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>24606</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2254</td>\n",
       "      <td>8100</td>\n",
       "      <td>7859</td>\n",
       "      <td>103</td>\n",
       "      <td>18320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9241</td>\n",
       "      <td>Campinas</td>\n",
       "      <td>12732</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>700</td>\n",
       "      <td>1600</td>\n",
       "      <td>96</td>\n",
       "      <td>21</td>\n",
       "      <td>2417</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              cidade   area  quartos  banheiros  vagas_estacionamento andar  \\\n",
       "2397  Belo Horizonte  46335        4          8                     5    11   \n",
       "5915       São Paulo  24606        5          4                     4    12   \n",
       "9241        Campinas  12732        3          2                     0     3   \n",
       "\n",
       "      animal  mobiliado  condominio  aluguel  IPTU  seguro_incendio  \\\n",
       "2397       1          1         960     8500   646              114   \n",
       "5915       1          0        2254     8100  7859              103   \n",
       "9241       1          0         700     1600    96               21   \n",
       "\n",
       "      valor_total  \n",
       "2397        10220  \n",
       "5915        18320  \n",
       "9241         2417  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Conhecendo outliers\n",
    "\n",
    "df[df.area > 10000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Criar data frame df_viz, apenas para visualização, sem os outliers\n",
    "df_viz = df[df.area < 10000]\n",
    "\n",
    "# Visualização das área em histograma\n",
    "\n",
    "plt.hist(df_viz.area, bins=100)\n",
    "plt.axvline(df_viz.area.median(), color='k', linestyle='dashed', linewidth=1, label='50%')\n",
    "plt.axvline(maxi_area, color='r', linestyle='dashed', linewidth=1, label='80%')\n",
    "plt.legend(loc='upper right')\n",
    "plt.xlabel('Área')\n",
    "plt.ylabel('Nº de imóveis')\n",
    "plt.title('Distribuição das área')\n",
    "plt.xlim(right=700)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"4\" halign=\"left\">area</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>std</th>\n",
       "      <th>len</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cidade</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Belo Horizonte</td>\n",
       "      <td>176.073144</td>\n",
       "      <td>90</td>\n",
       "      <td>1531.043393</td>\n",
       "      <td>916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>São Paulo</td>\n",
       "      <td>133.765738</td>\n",
       "      <td>90</td>\n",
       "      <td>388.863184</td>\n",
       "      <td>4273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Campinas</td>\n",
       "      <td>108.337442</td>\n",
       "      <td>68</td>\n",
       "      <td>501.209542</td>\n",
       "      <td>649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>99.611908</td>\n",
       "      <td>80</td>\n",
       "      <td>81.315499</td>\n",
       "      <td>1394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>83.465465</td>\n",
       "      <td>66</td>\n",
       "      <td>68.445644</td>\n",
       "      <td>999</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      area                          \n",
       "                      mean median          std   len\n",
       "cidade                                              \n",
       "Belo Horizonte  176.073144     90  1531.043393   916\n",
       "São Paulo       133.765738     90   388.863184  4273\n",
       "Campinas        108.337442     68   501.209542   649\n",
       "Rio de Janeiro   99.611908     80    81.315499  1394\n",
       "Porto Alegre     83.465465     66    68.445644   999"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Visualizando as diferenças de médias de aluguel por cidade\n",
    "\n",
    "cidades_area_df = df.groupby(by='cidade').agg({'area': [np.mean, np.median, np.std,\\\n",
    "                                                        len]}).sort_values(by=[('area',   'mean')], ascending=False)\n",
    "cidades_area_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0.5, 1.0, 'Área por cidade')]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Distribuição da área dos apartamntos por cidade, agora em log\n",
    "\n",
    "cidades_por_area = cidades_area_df.index\n",
    "cidades_por_area\n",
    "\n",
    "g = sns.boxplot(x='cidade', y='area', data=df, order=cidades_por_area)\n",
    "g.set_yscale(\"log\")\n",
    "g.set(title='Área por cidade')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.4 Cômodos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    0.306524\n",
      "3    0.303122\n",
      "1    0.251488\n",
      "4    0.127324\n",
      "5    0.010448\n",
      "6    0.000850\n",
      "7    0.000243\n",
      "Name: quartos, dtype: float64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualização do imóveis por número de quartos\n",
    "\n",
    "df.quartos.value_counts().sort_index().plot(kind='bar')\n",
    "plt.xlabel('Nº de quartos')\n",
    "plt.ylabel('Nº de imóveis')\n",
    "plt.title('Nº de quartos por imóvel')\n",
    "\n",
    "print(df.quartos.value_counts(normalize=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    0.436277\n",
      "2    0.291459\n",
      "3    0.124043\n",
      "4    0.090390\n",
      "5    0.043008\n",
      "6    0.011542\n",
      "7    0.003037\n",
      "9    0.000121\n",
      "8    0.000121\n",
      "Name: banheiros, dtype: float64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualização do imóveis por número de banheiros\n",
    "\n",
    "df.banheiros.value_counts().sort_index().plot(kind='bar')\n",
    "plt.xlabel('Nº de banheiros')\n",
    "plt.ylabel('Nº de imóveis')\n",
    "plt.title('Nº de banheiros por imóvel')\n",
    "\n",
    "print(df.banheiros.value_counts(normalize=True)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    0.399830\n",
      "0    0.248451\n",
      "2    0.192929\n",
      "3    0.083708\n",
      "4    0.056494\n",
      "5    0.012392\n",
      "6    0.004738\n",
      "8    0.000850\n",
      "7    0.000607\n",
      "Name: vagas_estacionamento, dtype: float64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualização da disbruição das vagas de estacionamento por imóvel \n",
    "\n",
    "plt.hist(df.vagas_estacionamento, bins=16)\n",
    "plt.xlabel('Nº de vagas')\n",
    "plt.ylabel('Nº de imóveis')\n",
    "plt.title('Nº de vagas por imóvel')\n",
    "\n",
    "print(df.vagas_estacionamento.value_counts(normalize=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.5 Adicionando variável (metro quadrado)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cidade</th>\n",
       "      <th>area</th>\n",
       "      <th>quartos</th>\n",
       "      <th>banheiros</th>\n",
       "      <th>vagas_estacionamento</th>\n",
       "      <th>andar</th>\n",
       "      <th>animal</th>\n",
       "      <th>mobiliado</th>\n",
       "      <th>condominio</th>\n",
       "      <th>aluguel</th>\n",
       "      <th>IPTU</th>\n",
       "      <th>seguro_incendio</th>\n",
       "      <th>valor_total</th>\n",
       "      <th>aluguel_m2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>70</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2065</td>\n",
       "      <td>3300</td>\n",
       "      <td>211</td>\n",
       "      <td>42</td>\n",
       "      <td>5618</td>\n",
       "      <td>47.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>320</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1200</td>\n",
       "      <td>4960</td>\n",
       "      <td>1750</td>\n",
       "      <td>63</td>\n",
       "      <td>7973</td>\n",
       "      <td>15.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>80</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>2800</td>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>3841</td>\n",
       "      <td>35.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>270</td>\n",
       "      <td>1112</td>\n",
       "      <td>22</td>\n",
       "      <td>17</td>\n",
       "      <td>1421</td>\n",
       "      <td>21.803922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>800</td>\n",
       "      <td>25</td>\n",
       "      <td>11</td>\n",
       "      <td>836</td>\n",
       "      <td>32.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         cidade  area  quartos  banheiros  vagas_estacionamento andar  animal  \\\n",
       "0     São Paulo    70        2          1                     1     7       1   \n",
       "1     São Paulo   320        4          4                     0    20       1   \n",
       "2  Porto Alegre    80        1          1                     1     6       1   \n",
       "3  Porto Alegre    51        2          1                     0     2       1   \n",
       "4     São Paulo    25        1          1                     0     1       0   \n",
       "\n",
       "   mobiliado  condominio  aluguel  IPTU  seguro_incendio  valor_total  \\\n",
       "0          1        2065     3300   211               42         5618   \n",
       "1          0        1200     4960  1750               63         7973   \n",
       "2          0        1000     2800     0               41         3841   \n",
       "3          0         270     1112    22               17         1421   \n",
       "4          0           0      800    25               11          836   \n",
       "\n",
       "   aluguel_m2  \n",
       "0   47.142857  \n",
       "1   15.500000  \n",
       "2   35.000000  \n",
       "3   21.803922  \n",
       "4   32.000000  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Criando coluna de aluguel por metro quadrado\n",
    "\n",
    "df['aluguel_m2'] = df.aluguel/df.area\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80% dos apartamentos tem o aluguel por metro quadrado na faixa de 0.13 a 49.23 metros\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "count    8231.000000\n",
       "mean       35.952534\n",
       "std        24.053555\n",
       "min         0.125668\n",
       "25%        20.000000\n",
       "50%        29.037433\n",
       "75%        44.336478\n",
       "max       300.000000\n",
       "Name: aluguel_m2, dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calcular a faixa de área que contém 80% dos imóveis\n",
    "\n",
    "oitenta_pct_m2 = int(round(len(df.aluguel_m2)*0.80, 0))\n",
    "\n",
    "maxi_m2 = max(df.aluguel_m2.sort_values()[: oitenta_pct_m2])\n",
    "\n",
    "print ('80% dos apartamentos tem o aluguel por metro quadrado na faixa de',\\\n",
    "       round(min(df.aluguel_m2),2), 'a', round(maxi_m2,2), 'metros')\n",
    "\n",
    "df.aluguel_m2.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Valor mediano:  29.037433155080215\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "oitenta_pct_m2 = int(round(len(df.aluguel_m2)*0.80, 0))\n",
    "\n",
    "maxi_m2 = max(df.aluguel_m2.sort_values()[: oitenta_pct_m2])\n",
    "\n",
    "plt.hist(df.aluguel_m2, bins=100)\n",
    "plt.axvline(df.aluguel_m2.median(), color='k', linestyle='dashed', linewidth=1, label='50%')\n",
    "plt.axvline(maxi_m2, color='r', linestyle='dashed', linewidth=1, label='80%')\n",
    "plt.legend(loc='upper right')\n",
    "plt.xlabel('Valor aluguel por metro quadrado')\n",
    "plt.ylabel('Nº de imóveis')\n",
    "plt.title('Distribuição dos aluguéis por metro quadrado')\n",
    "plt.xlim(right=200)\n",
    "\n",
    "print('Valor mediano: ', df.aluguel_m2.median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"4\" halign=\"left\">aluguel_m2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>std</th>\n",
       "      <th>len</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cidade</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>São Paulo</td>\n",
       "      <td>42.787661</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>27.328553</td>\n",
       "      <td>4273.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>35.567199</td>\n",
       "      <td>30.116959</td>\n",
       "      <td>20.637110</td>\n",
       "      <td>1394.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>26.715748</td>\n",
       "      <td>23.250000</td>\n",
       "      <td>13.177928</td>\n",
       "      <td>999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Belo Horizonte</td>\n",
       "      <td>24.527097</td>\n",
       "      <td>20.027778</td>\n",
       "      <td>13.856174</td>\n",
       "      <td>916.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Campinas</td>\n",
       "      <td>22.121883</td>\n",
       "      <td>18.959108</td>\n",
       "      <td>12.427415</td>\n",
       "      <td>649.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               aluguel_m2                              \n",
       "                     mean     median        std     len\n",
       "cidade                                                 \n",
       "São Paulo       42.787661  35.000000  27.328553  4273.0\n",
       "Rio de Janeiro  35.567199  30.116959  20.637110  1394.0\n",
       "Porto Alegre    26.715748  23.250000  13.177928   999.0\n",
       "Belo Horizonte  24.527097  20.027778  13.856174   916.0\n",
       "Campinas        22.121883  18.959108  12.427415   649.0"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Visualizando as diferenças de aluguel por m2 por cidade\n",
    "\n",
    "cidades_m2_df = df.groupby(by='cidade').agg({'aluguel_m2': [np.mean, np.median, np.std,\\\n",
    "                                                        len]}).sort_values(by=[('aluguel_m2',   'mean')], ascending=False)\n",
    "\n",
    "cidades_m2_df\n",
    "\n",
    "# Porto Alegre é possui um alugul por metro uadrado maior do que o de Belo Horizonte, porém, essa diferença é significativa?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0.5, 1.0, 'Distribuição do aluguel por m2 por cidade')]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Custo do metro quadrado por cidade\n",
    "\n",
    "ax = sns.boxplot(x='cidade', y='aluguel_m2', data=df, order = cidades_m2_df.index)\n",
    "ax.set(title='Distribuição do aluguel por m2 por cidade')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Testes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.1 Teste qui-quadrado de qualidade do ajuste da amostra"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Tabela 3152 - Domicílios particulares permanentes, por tipo do domicílio e número de moradores - Resultados Preliminares do Universo</th>\n",
       "      <th>Unnamed: 1</th>\n",
       "      <th>Unnamed: 2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Variável - Domicílios particulares permanentes...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Município</td>\n",
       "      <td>Número de moradores</td>\n",
       "      <td>Ano x Tipo de domicílio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Apartamento</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Alta Floresta D'Oeste (RO)</td>\n",
       "      <td>Total</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Ariquemes (RO)</td>\n",
       "      <td>Total</td>\n",
       "      <td>2236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Cabixi (RO)</td>\n",
       "      <td>Total</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Cacoal (RO)</td>\n",
       "      <td>Total</td>\n",
       "      <td>1161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Cerejeiras (RO)</td>\n",
       "      <td>Total</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Colorado do Oeste (RO)</td>\n",
       "      <td>Total</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Tabela 3152 - Domicílios particulares permanentes, por tipo do domicílio e número de moradores - Resultados Preliminares do Universo  \\\n",
       "0  Variável - Domicílios particulares permanentes...                                                                                     \n",
       "1                                          Município                                                                                     \n",
       "2                                                NaN                                                                                     \n",
       "3                                                NaN                                                                                     \n",
       "4                         Alta Floresta D'Oeste (RO)                                                                                     \n",
       "5                                     Ariquemes (RO)                                                                                     \n",
       "6                                        Cabixi (RO)                                                                                     \n",
       "7                                        Cacoal (RO)                                                                                     \n",
       "8                                    Cerejeiras (RO)                                                                                     \n",
       "9                             Colorado do Oeste (RO)                                                                                     \n",
       "\n",
       "            Unnamed: 1               Unnamed: 2  \n",
       "0                  NaN                      NaN  \n",
       "1  Número de moradores  Ano x Tipo de domicílio  \n",
       "2                  NaN                     2010  \n",
       "3                  NaN              Apartamento  \n",
       "4                Total                       15  \n",
       "5                Total                     2236  \n",
       "6                Total                        1  \n",
       "7                Total                     1161  \n",
       "8                Total                       34  \n",
       "9                Total                       16  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Vamos verificar se a frequencia observada das cidades é significativa, quando comparada com a frequencia esperada\n",
    "\n",
    "# Para definir a fruencia sperada, foi utilizado o número de domicílios por cidade, da Censo de 2010\n",
    "\n",
    "domicilios_cidade = pd.read_excel('Dados/tabela3152.xlsx')\n",
    "domicilios_cidade.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Tabela 3152 - Domicílios particulares permanentes, por tipo do domicílio e número de moradores - Resultados Preliminares do Universo',\n",
       "       'Unnamed: 1', 'Unnamed: 2'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "domicilios_cidade.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Tabela 3152 - Domicílios particulares permanentes, por tipo do domicílio e número de moradores - Resultados Preliminares do Universo</th>\n",
       "      <th>Unnamed: 2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Alta Floresta D'Oeste (RO)</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Ariquemes (RO)</td>\n",
       "      <td>2236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Cabixi (RO)</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Cacoal (RO)</td>\n",
       "      <td>1161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Cerejeiras (RO)</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Tabela 3152 - Domicílios particulares permanentes, por tipo do domicílio e número de moradores - Resultados Preliminares do Universo  \\\n",
       "4                         Alta Floresta D'Oeste (RO)                                                                                     \n",
       "5                                     Ariquemes (RO)                                                                                     \n",
       "6                                        Cabixi (RO)                                                                                     \n",
       "7                                        Cacoal (RO)                                                                                     \n",
       "8                                    Cerejeiras (RO)                                                                                     \n",
       "\n",
       "  Unnamed: 2  \n",
       "4         15  \n",
       "5       2236  \n",
       "6          1  \n",
       "7       1161  \n",
       "8         34  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Retirado colunas que não são úteis\n",
    "\n",
    "domicilios_cidade.drop(columns=['Unnamed: 1'], index=[0,1,2,3], inplace=True)\n",
    "domicilios_cidade.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cidade</th>\n",
       "      <th>unidades</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Alta Floresta D'Oeste (RO)</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Ariquemes (RO)</td>\n",
       "      <td>2236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Cabixi (RO)</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Cacoal (RO)</td>\n",
       "      <td>1161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Cerejeiras (RO)</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       cidade unidades\n",
       "0  Alta Floresta D'Oeste (RO)       15\n",
       "1              Ariquemes (RO)     2236\n",
       "2                 Cabixi (RO)        1\n",
       "3                 Cacoal (RO)     1161\n",
       "4             Cerejeiras (RO)       34"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Renomeando as colunas\n",
    "\n",
    "domicilios_cidade.rename(columns = {'Tabela 3152 - Domicílios particulares permanentes, por tipo do domicílio e número de moradores - Resultados Preliminares do Universo'\\\n",
    "                                    : 'cidade', 'Unnamed: 2': 'unidades'}, inplace = True)\n",
    "domicilios_cidade.reset_index(inplace=True, drop=True)\n",
    "domicilios_cidade.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabri\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py:6702: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  regex=regex,\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cidade</th>\n",
       "      <th>unidades</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2308</td>\n",
       "      <td>Belo Horizonte</td>\n",
       "      <td>251275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3241</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>806769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3374</td>\n",
       "      <td>Campinas</td>\n",
       "      <td>85011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3828</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>1009636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4927</td>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>237297</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              cidade unidades\n",
       "2308  Belo Horizonte   251275\n",
       "3241  Rio de Janeiro   806769\n",
       "3374        Campinas    85011\n",
       "3828       São Paulo  1009636\n",
       "4927    Porto Alegre   237297"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Filtrando apenas para as cidades que queremos\n",
    "\n",
    "domicilios_cidade_selecionado = domicilios_cidade[domicilios_cidade.cidade.isin(['São Paulo (SP)', 'Rio de Janeiro (RJ)', \\\n",
    "                                                                               'Belo Horizonte (MG)', 'Porto Alegre (RS)',\\\n",
    "                                                                               'Campinas (SP)'])]\n",
    "\n",
    "domicilios_cidade_selecionado.replace({'cidade':{'São Paulo (SP)': 'São Paulo',\\\n",
    "                                                  'Rio de Janeiro (RJ)': 'Rio de Janeiro',\\\n",
    "                                                 'Belo Horizonte (MG)': 'Belo Horizonte',\\\n",
    "                                                  'Porto Alegre (RS)':'Porto Alegre',\\\n",
    "                                                 'Campinas (SP)': 'Campinas'}},inplace=True)\n",
    "\n",
    "domicilios_cidade_selecionado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabri\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cidade</th>\n",
       "      <th>unidades</th>\n",
       "      <th>frequencia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2308</td>\n",
       "      <td>Belo Horizonte</td>\n",
       "      <td>251275</td>\n",
       "      <td>0.105137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3241</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>806769</td>\n",
       "      <td>0.337562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3374</td>\n",
       "      <td>Campinas</td>\n",
       "      <td>85011</td>\n",
       "      <td>0.0355696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3828</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>1009636</td>\n",
       "      <td>0.422444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4927</td>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>237297</td>\n",
       "      <td>0.0992879</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              cidade unidades frequencia\n",
       "2308  Belo Horizonte   251275   0.105137\n",
       "3241  Rio de Janeiro   806769   0.337562\n",
       "3374        Campinas    85011  0.0355696\n",
       "3828       São Paulo  1009636   0.422444\n",
       "4927    Porto Alegre   237297  0.0992879"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Adicionando uma coluna 'Frequencia'\n",
    "\n",
    "domicilios_cidade_selecionado['frequencia'] = domicilios_cidade_selecionado.unidades/(domicilios_cidade_selecionado.unidades.sum())\n",
    "domicilios_cidade_selecionado.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabri\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n",
      "C:\\Users\\gabri\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cidade</th>\n",
       "      <th>unidades</th>\n",
       "      <th>frequencia</th>\n",
       "      <th>unidades_esperado</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3828</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>1009636</td>\n",
       "      <td>0.422444</td>\n",
       "      <td>3477.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3241</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>806769</td>\n",
       "      <td>0.337562</td>\n",
       "      <td>2778.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2308</td>\n",
       "      <td>Belo Horizonte</td>\n",
       "      <td>251275</td>\n",
       "      <td>0.105137</td>\n",
       "      <td>865.379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4927</td>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>237297</td>\n",
       "      <td>0.0992879</td>\n",
       "      <td>817.239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3374</td>\n",
       "      <td>Campinas</td>\n",
       "      <td>85011</td>\n",
       "      <td>0.0355696</td>\n",
       "      <td>292.774</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              cidade unidades frequencia unidades_esperado\n",
       "3828       São Paulo  1009636   0.422444           3477.14\n",
       "3241  Rio de Janeiro   806769   0.337562           2778.47\n",
       "2308  Belo Horizonte   251275   0.105137           865.379\n",
       "4927    Porto Alegre   237297  0.0992879           817.239\n",
       "3374        Campinas    85011  0.0355696           292.774"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dada essa frequencia encontrada, qual seria o número de imoveis por cidade esperado\n",
    "# Ordenando por número de unidades\n",
    "\n",
    "domicilios_cidade_selecionado['unidades_esperado'] = domicilios_cidade_selecionado.frequencia * df.cidade.count()\n",
    "\n",
    "domicilios_cidade_selecionado.sort_values(by='unidades', ascending=False, inplace=True)\n",
    "domicilios_cidade_selecionado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "São Paulo         4273\n",
       "Rio de Janeiro    1394\n",
       "Porto Alegre       999\n",
       "Belo Horizonte     916\n",
       "Campinas           649\n",
       "Name: cidade, dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Obtendo o número de imóveis por cidade \n",
    "\n",
    "freq_cidade_obs = df.cidade.value_counts()\n",
    "freq_cidade_obs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cidade</th>\n",
       "      <th>unidades_obs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>4273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>1394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Belo Horizonte</td>\n",
       "      <td>916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Campinas</td>\n",
       "      <td>649</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           cidade  unidades_obs\n",
       "0       São Paulo          4273\n",
       "1  Rio de Janeiro          1394\n",
       "2    Porto Alegre           999\n",
       "3  Belo Horizonte           916\n",
       "4        Campinas           649"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Transformando a série gerada com o 'values_count' em data frame\n",
    "\n",
    "freq_cidade_obs = pd.DataFrame({'cidade': freq_cidade_obs.index, 'unidades_obs': freq_cidade_obs.values})\n",
    "freq_cidade_obs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cidade</th>\n",
       "      <th>unidades</th>\n",
       "      <th>frequencia</th>\n",
       "      <th>unidades_esperado</th>\n",
       "      <th>unidades_obs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>São Paulo</td>\n",
       "      <td>1009636</td>\n",
       "      <td>0.422444</td>\n",
       "      <td>3477.14</td>\n",
       "      <td>4273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>806769</td>\n",
       "      <td>0.337562</td>\n",
       "      <td>2778.47</td>\n",
       "      <td>1394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Belo Horizonte</td>\n",
       "      <td>251275</td>\n",
       "      <td>0.105137</td>\n",
       "      <td>865.379</td>\n",
       "      <td>916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>237297</td>\n",
       "      <td>0.0992879</td>\n",
       "      <td>817.239</td>\n",
       "      <td>999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Campinas</td>\n",
       "      <td>85011</td>\n",
       "      <td>0.0355696</td>\n",
       "      <td>292.774</td>\n",
       "      <td>649</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           cidade unidades frequencia unidades_esperado  unidades_obs\n",
       "0       São Paulo  1009636   0.422444           3477.14          4273\n",
       "1  Rio de Janeiro   806769   0.337562           2778.47          1394\n",
       "2  Belo Horizonte   251275   0.105137           865.379           916\n",
       "3    Porto Alegre   237297  0.0992879           817.239           999\n",
       "4        Campinas    85011  0.0355696           292.774           649"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Unindo os data frames 'domicilios_cidade_selecionado', que possui os dados do Censo, com 'freq_cidade_obs' dados do Kaggle\n",
    "\n",
    "df_freq_cidades = pd.merge(domicilios_cidade_selecionado, freq_cidade_obs, on='cidade')\n",
    "df_freq_cidades"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Power_divergenceResult(statistic=1348.8409959637863, pvalue=8.559994402679104e-291)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rodando um teste qui-quadrado de qualidade do ajuste (Goodness-Of-Fit) \n",
    "\n",
    "stats.chisquare(f_obs = df_freq_cidades.unidades_obs, f_exp = df_freq_cidades.unidades_esperado)\n",
    "\n",
    "\n",
    "# Hipotese nula rejeitada, as distribuiçõs não possuem a mesma frequência"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_freq_cidades_viz = df_freq_cidades.drop(columns=['unidades', 'frequencia'])\n",
    "df_freq_cidades_viz.set_index('cidade', inplace=True)\n",
    "df_freq_cidades_viz.plot(kind=\"bar\")\n",
    "plt.title('Comparação entre unidades esperadas x observadas')\n",
    "plt.ylabel('Nº de unidades')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.2 Teste de duas amostras (média e mediana)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.2.1 Aluguel do Rio de Janeiro x Belo Horizonte"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NormaltestResult(statistic=3002.487357645163, pvalue=0.0)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Testando a normalidade da distribuiução dos aluguéis\n",
    "\n",
    "stats.normaltest(df.aluguel)\n",
    "\n",
    "# P Valor igual a zero. Rejeitando a hipótese de que a distribuição é normal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizando a diferença de médias\n",
    "\n",
    "rj_aluguel = df.loc[df.cidade == 'Rio de Janeiro', 'aluguel']\n",
    "bh_aluguel = df.loc[df.cidade == 'Belo Horizonte', 'aluguel']\n",
    "\n",
    "plt.hist(rj_aluguel, alpha=0.5, label = 'RJ', bins = 50, color='red')\n",
    "plt.hist(bh_aluguel, alpha=0.5, label = 'BH', bins = 50, color='blue')\n",
    "plt.axvline(rj_aluguel.mean(), color='red', linestyle='dashed', linewidth=1, label='Média RJ')\n",
    "plt.axvline(bh_aluguel.mean(), color='blue', linestyle='dashed', linewidth=1, label='Média BH')\n",
    "plt.xlabel('Valor aluguel')\n",
    "plt.ylabel('Nº de imóveis')\n",
    "plt.title('Distribuição dos aluguéis (RJ x BH)')\n",
    "plt.legend(loc='upper right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0.5, 1.0, 'Aluguel de Rio de Janeiro x Belo Horizonte')]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizando a diferença de medianas\n",
    "\n",
    "ax = sns.boxplot(x='cidade', y='aluguel', data=df[(df.cidade == 'Belo Horizonte') | (df.cidade == 'Rio de Janeiro')])\n",
    "ax.set(title='Aluguel de Rio de Janeiro x Belo Horizonte')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1.9346328897410452, 0.05303536102853657)\n",
      "0.0776522862054672\n"
     ]
    }
   ],
   "source": [
    "# Teste de hipótse para a média das duas amostras\n",
    "\n",
    "print(sm.stats.ztest(rj_aluguel, bh_aluguel))\n",
    "\n",
    "print((rj_aluguel.mean() - bh_aluguel.mean())/bh_aluguel.mean())\n",
    "\n",
    "\n",
    "# Os imóveis do Rio de Janeiro são, em média, 8% mais caros do os de Belo Horizonte."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(21.493479541140132, 3.5503382222735926e-06, 2194.0, array([[403, 752],\n",
      "       [513, 642]], dtype=int64))\n",
      "0.2777777777777778\n"
     ]
    }
   ],
   "source": [
    "# Teste de hipótese para a mediana\n",
    "\n",
    "print(stats.median_test(bh_aluguel, rj_aluguel))\n",
    "\n",
    "print((rj_aluguel.median() - bh_aluguel.median())/bh_aluguel.median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"4\" halign=\"left\">area</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>max</th>\n",
       "      <th>len</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cidade</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Belo Horizonte</td>\n",
       "      <td>176.073144</td>\n",
       "      <td>1531.043393</td>\n",
       "      <td>46335</td>\n",
       "      <td>916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Campinas</td>\n",
       "      <td>108.337442</td>\n",
       "      <td>501.209542</td>\n",
       "      <td>12732</td>\n",
       "      <td>649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Porto Alegre</td>\n",
       "      <td>83.465465</td>\n",
       "      <td>68.445644</td>\n",
       "      <td>900</td>\n",
       "      <td>999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>99.611908</td>\n",
       "      <td>81.315499</td>\n",
       "      <td>950</td>\n",
       "      <td>1394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>São Paulo</td>\n",
       "      <td>133.765738</td>\n",
       "      <td>388.863184</td>\n",
       "      <td>24606</td>\n",
       "      <td>4273</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      area                          \n",
       "                      mean          std    max   len\n",
       "cidade                                              \n",
       "Belo Horizonte  176.073144  1531.043393  46335   916\n",
       "Campinas        108.337442   501.209542  12732   649\n",
       "Porto Alegre     83.465465    68.445644    900   999\n",
       "Rio de Janeiro   99.611908    81.315499    950  1394\n",
       "São Paulo       133.765738   388.863184  24606  4273"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Visualizando as diferenças do tamanho dos apartamentos\n",
    "\n",
    "df.groupby(by='cidade').agg({'area': [np.mean, np.std, max, len]})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.2.2 Área dos apartamentos São Paulo x Belo Horizonte"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0.5, 1.0, 'Aluguel de São Paulo x Belo Horizonte')]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizando a área dos apartamentos em São Paulo e Belo Horizonte\n",
    "\n",
    "ax = sns.boxplot(x='cidade', y='area', data=df[(df.cidade == 'São Paulo') | (df.cidade == 'Belo Horizonte')])\n",
    "ax.set_yscale(\"log\")\n",
    "ax.set(title='Aluguel de São Paulo x Belo Horizonte')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizando. Retirando os dados do data frame \n",
    "\n",
    "sp_area = df_viz.loc[df.cidade == 'São Paulo', 'area']\n",
    "bh_area = df_viz.loc[df.cidade == 'Belo Horizonte', 'area']\n",
    "\n",
    "plt.hist(sp_area, alpha=0.5, label = 'SP', bins = 100, color='red')\n",
    "plt.hist(bh_area, alpha=0.5, label = 'BH', bins = 100, color='blue')\n",
    "plt.axvline(sp_area.mean(), color='red', linestyle='dashed', linewidth=1, label='Média SP')\n",
    "plt.axvline(bh_area.mean(), color='blue', linestyle='dashed', linewidth=1, label='Média BH')\n",
    "plt.xlim(right=700)\n",
    "plt.xlabel('Área')\n",
    "plt.ylabel('Nº de imóveis')\n",
    "plt.title('Distribuição dos aluguéis (SP x BH)')\n",
    "plt.legend(loc='upper right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0.6213581109189411, 0.534364026888494)\n",
      "0.019191769126283918\n"
     ]
    }
   ],
   "source": [
    "# Teste de hipótse para a média das duas amostras, sem os outliers\n",
    "\n",
    "sp_area = df_viz.loc[df_viz.cidade == 'São Paulo', 'area']\n",
    "bh_area = df_viz.loc[df_viz.cidade == 'Belo Horizonte', 'area']\n",
    "\n",
    "print(sm.stats.ztest(sp_area, bh_area))\n",
    "\n",
    "print((sp_area.mean() - bh_area.mean())/bh_area.mean())\n",
    "\n",
    "\n",
    "# A diferença de médias não é significante"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(-1.5840898870499012, 0.11317326540685728)\n",
      "-0.24028312757620124\n"
     ]
    }
   ],
   "source": [
    "# Teste de hipótse para a média das duas amostras, com os outliers\n",
    "\n",
    "sp_area = df.loc[df.cidade == 'São Paulo', 'area']\n",
    "bh_area = df.loc[df.cidade == 'Belo Horizonte', 'area']\n",
    "\n",
    "print(sm.stats.ztest(sp_area, bh_area))\n",
    "\n",
    "print((sp_area.mean() - bh_area.mean())/bh_area.mean())\n",
    "\n",
    "\n",
    "# Vemos que o nesse caso a diferença de médias aumenta bastante. Porém, a um p-valor de 0.05, o hipótese nula, de que as médias são iguais, não foi rejeitada. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0.018826725254990403, 0.890864400248042, 90.0, array([[2109,  455],\n",
      "       [2164,  461]], dtype=int64))\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "# Teste de hipótese para a mediana\n",
    "\n",
    "print(stats.median_test(sp_area, bh_area))\n",
    "\n",
    "print((sp_area.median() - bh_area.median())/bh_area.median())\n",
    "\n",
    "# As medianas são rigorosamnte as mesmas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.2.3 Aluguel por metro quadrado do Porto Alegre x Belo Horizonte"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizando. Retirando os dados do data frame \n",
    "\n",
    "poa_aluguel_m2 = df.loc[df.cidade == 'Porto Alegre', 'aluguel_m2']\n",
    "bh_aluguel_m2 = df.loc[df.cidade == 'Belo Horizonte', 'aluguel_m2']\n",
    "\n",
    "plt.hist(poa_aluguel_m2, alpha=0.5, label = 'POA', bins = 100, color='red')\n",
    "plt.hist(bh_aluguel_m2, alpha=0.5, label = 'BH', bins = 100, color='blue')\n",
    "plt.axvline(poa_aluguel_m2.mean(), color='red', linestyle='dashed', linewidth=1, label='Média POA')\n",
    "plt.axvline(bh_area.mean(), color='blue', linestyle='dashed', linewidth=1, label='Média BH')\n",
    "plt.xlim(right=100)\n",
    "plt.xlabel('Aluguel m2')\n",
    "plt.ylabel('Nº de imóveis')\n",
    "plt.title('Distribuição do aluguel por m2 (POA x BH)')\n",
    "plt.legend(loc='upper right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3.542232460503813, 0.00039675566404832207)\n",
      "0.0892340181315272\n"
     ]
    }
   ],
   "source": [
    "# Teste de hipótse para a média das duas amostras, com os outliers\n",
    "\n",
    "print(sm.stats.ztest(poa_aluguel_m2, bh_aluguel_m2))\n",
    "\n",
    "print((poa_aluguel_m2.mean() - bh_aluguel_m2.mean())/bh_aluguel_m2.mean())\n",
    "\n",
    "# A diferença de 8,9% entre as médias é significativa. Porto Alegre possui um aluguel por metro quadrado maior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0.5, 1.0, 'Aluguel por m2 de Porto Alegre x Belo Horizonte')]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizando a difirença entr as medianas\n",
    "\n",
    "ax = sns.boxplot(x='cidade', y='aluguel_m2', data=df[(df.cidade == 'Porto Alegre') | (df.cidade == 'Belo Horizonte')])\n",
    "ax.set(title='Aluguel por m2 de Porto Alegre x Belo Horizonte')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(27.9487010051229, 1.2457455835682748e-07, 21.875, array([[557, 399],\n",
      "       [442, 517]], dtype=int64))\n",
      "0.16088765603328706\n"
     ]
    }
   ],
   "source": [
    "# Teste de hipótese para a mediana\n",
    "\n",
    "print(stats.median_test(poa_aluguel_m2, bh_aluguel_m2))\n",
    "\n",
    "print((poa_aluguel_m2.median() - bh_aluguel_m2.median())/bh_aluguel_m2.median())\n",
    "\n",
    "# Diferença significativa"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Modelo Preditivo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R é igual a 0.6533549571962767\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizando a dispersão e encontrando a correlação\n",
    "\n",
    "ax = sns.regplot('area', 'aluguel', data=df_viz)\n",
    "ax.set(title='Correlação área x aluguel')\n",
    "\n",
    "r = np.corrcoef(df_viz.area, df_viz.aluguel)\n",
    "print('R é igual a', r[1,0])\n",
    "\n",
    "# Aparentemente há um valor próximo a 15.000, q funciona como um teto, para grande parte dos imoveis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "São Paulo 0.1895366066540881\n",
      "\n",
      "\n",
      "Porto Alegre 0.6290686326613687\n",
      "\n",
      "\n",
      "Rio de Janeiro 0.6666679906106247\n",
      "\n",
      "\n",
      "Campinas 0.0969493484249391\n",
      "\n",
      "\n",
      "Belo Horizonte 0.10898430664205601\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Encontrar a correlação área x aluguel para cada cidade\n",
    "\n",
    "nomes_cidades = df.cidade.unique()\n",
    "\n",
    "for i in nomes_cidades:\n",
    "    data = df[df.cidade == i]\n",
    "    r = np.corrcoef(data.area, data.aluguel)\n",
    "    print(i, r[1,0])\n",
    "    print('\\n')\n",
    "    \n",
    "# Campinas possui a maior correlação área x aluguel e Belo Horizonte a menor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1546cf1ae08>"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x='area', y='aluguel', hue='cidade', data=df_viz)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>aluguel</td>     <th>  R-squared:         </th> <td>   0.427</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.427</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   6127.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 17 Aug 2020</td> <th>  Prob (F-statistic):</th>  <td>  0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:57:09</td>     <th>  Log-Likelihood:    </th> <td> -75631.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  8228</td>      <th>  AIC:               </th> <td>1.513e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  8226</td>      <th>  BIC:               </th> <td>1.513e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td> 1179.0408</td> <td>   40.347</td> <td>   29.223</td> <td> 0.000</td> <td> 1099.951</td> <td> 1258.131</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>area</th>      <td>   20.9891</td> <td>    0.268</td> <td>   78.274</td> <td> 0.000</td> <td>   20.463</td> <td>   21.515</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>2256.162</td> <th>  Durbin-Watson:     </th> <td>   2.008</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>61648.986</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 0.720</td>  <th>  Prob(JB):          </th> <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td>16.332</td>  <th>  Cond. No.          </th> <td>    232.</td> \n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                aluguel   R-squared:                       0.427\n",
       "Model:                            OLS   Adj. R-squared:                  0.427\n",
       "Method:                 Least Squares   F-statistic:                     6127.\n",
       "Date:                Mon, 17 Aug 2020   Prob (F-statistic):               0.00\n",
       "Time:                        13:57:09   Log-Likelihood:                -75631.\n",
       "No. Observations:                8228   AIC:                         1.513e+05\n",
       "Df Residuals:                    8226   BIC:                         1.513e+05\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept   1179.0408     40.347     29.223      0.000    1099.951    1258.131\n",
       "area          20.9891      0.268     78.274      0.000      20.463      21.515\n",
       "==============================================================================\n",
       "Omnibus:                     2256.162   Durbin-Watson:                   2.008\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            61648.986\n",
       "Skew:                           0.720   Prob(JB):                         0.00\n",
       "Kurtosis:                      16.332   Cond. No.                         232.\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Regressao com minimos quadrados entre aluguel e área\n",
    "\n",
    "model_quartos = sm.OLS.from_formula(\"aluguel ~ area\", data=df_viz)\n",
    "resultado_area = model_quartos.fit()\n",
    "resultado_area.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizando o modelo\n",
    "\n",
    "plt.scatter(df_viz.area, df_viz.aluguel)\n",
    "plt.plot(df_viz.area, df_viz.area*resultado_area.params['area'] + resultado_area.params['Intercept'], 'red')\n",
    "plt.xlabel('Área')\n",
    "plt.ylabel('Aluguel')\n",
    "plt.title('Área x Aluguel')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Resíduos')"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizando a distribuição dos resíduos\n",
    "\n",
    "plt.scatter(resultado_area.fittedvalues, resultado_area.resid)\n",
    "plt.xlabel('Resultados')\n",
    "plt.ylabel('Resíduos')\n",
    "# Apesar dos teste Durbin-Watson nao indicar autocorrelação, vemos que o erros não são aleatórios, o que pode prejudicar o modelo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>aluguel</td>     <th>  R-squared:         </th> <td>   0.234</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.234</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   2515.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 17 Aug 2020</td> <th>  Prob (F-statistic):</th>  <td>  0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:57:09</td>     <th>  Log-Likelihood:    </th> <td> -76852.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  8231</td>      <th>  AIC:               </th> <td>1.537e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  8229</td>      <th>  BIC:               </th> <td>1.537e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>  129.1402</td> <td>   75.220</td> <td>    1.717</td> <td> 0.086</td> <td>  -18.309</td> <td>  276.590</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>quartos</th>   <td> 1474.2862</td> <td>   29.398</td> <td>   50.148</td> <td> 0.000</td> <td> 1416.658</td> <td> 1531.915</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>2640.443</td> <th>  Durbin-Watson:     </th> <td>   2.017</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>8195.791</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 1.660</td>  <th>  Prob(JB):          </th> <td>    0.00</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td> 6.588</td>  <th>  Cond. No.          </th> <td>    7.19</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                aluguel   R-squared:                       0.234\n",
       "Model:                            OLS   Adj. R-squared:                  0.234\n",
       "Method:                 Least Squares   F-statistic:                     2515.\n",
       "Date:                Mon, 17 Aug 2020   Prob (F-statistic):               0.00\n",
       "Time:                        13:57:09   Log-Likelihood:                -76852.\n",
       "No. Observations:                8231   AIC:                         1.537e+05\n",
       "Df Residuals:                    8229   BIC:                         1.537e+05\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept    129.1402     75.220      1.717      0.086     -18.309     276.590\n",
       "quartos     1474.2862     29.398     50.148      0.000    1416.658    1531.915\n",
       "==============================================================================\n",
       "Omnibus:                     2640.443   Durbin-Watson:                   2.017\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             8195.791\n",
       "Skew:                           1.660   Prob(JB):                         0.00\n",
       "Kurtosis:                       6.588   Cond. No.                         7.19\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Agora para a variável número de quartos\n",
    "\n",
    "model_quartos = sm.OLS.from_formula(\"aluguel ~ quartos\", data=df)\n",
    "resultado_quartos = model_quartos.fit()\n",
    "resultado_quartos.summary()\n",
    "\n",
    "# Vemos que o R é de 0.235, valor considerado baixo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizando o modelo\n",
    "\n",
    "plt.scatter(df.quartos, df.aluguel)\n",
    "plt.plot(df.quartos, df.quartos*resultado_quartos.params['quartos'] + resultado_quartos.params['Intercept'], 'red')\n",
    "plt.xlabel('Nº de quartos')\n",
    "plt.ylabel('Aluguel')\n",
    "plt.title('Nº de quartos x Aluguel')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area</th>\n",
       "      <th>quartos</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>area</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.14336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>quartos</td>\n",
       "      <td>0.14336</td>\n",
       "      <td>1.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            area  quartos\n",
       "area     1.00000  0.14336\n",
       "quartos  0.14336  1.00000"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Buscando a correlação entre as duas variáveis independentes\n",
    "\n",
    "df[[\"area\", \"quartos\"]].corr()\n",
    "\n",
    "# Vemos que há uma correlação forte entre as duas variáveis, que mostra que há multicolinearidade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>aluguel</td>     <th>  R-squared:         </th> <td>   0.337</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.336</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   4175.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 17 Aug 2020</td> <th>  Prob (F-statistic):</th>  <td>  0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:57:09</td>     <th>  Log-Likelihood:    </th> <td> -76261.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  8231</td>      <th>  AIC:               </th> <td>1.525e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  8229</td>      <th>  BIC:               </th> <td>1.525e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "            <td></td>              <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>            <td> 1575.9035</td> <td>   41.931</td> <td>   37.583</td> <td> 0.000</td> <td> 1493.708</td> <td> 1658.099</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>vagas_estacionamento</th> <td> 1470.6969</td> <td>   22.762</td> <td>   64.611</td> <td> 0.000</td> <td> 1426.077</td> <td> 1515.317</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>2646.762</td> <th>  Durbin-Watson:     </th> <td>   2.005</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>9528.355</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 1.596</td>  <th>  Prob(JB):          </th> <td>    0.00</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td> 7.194</td>  <th>  Cond. No.          </th> <td>    3.24</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                aluguel   R-squared:                       0.337\n",
       "Model:                            OLS   Adj. R-squared:                  0.336\n",
       "Method:                 Least Squares   F-statistic:                     4175.\n",
       "Date:                Mon, 17 Aug 2020   Prob (F-statistic):               0.00\n",
       "Time:                        13:57:09   Log-Likelihood:                -76261.\n",
       "No. Observations:                8231   AIC:                         1.525e+05\n",
       "Df Residuals:                    8229   BIC:                         1.525e+05\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================\n",
       "                           coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------------\n",
       "Intercept             1575.9035     41.931     37.583      0.000    1493.708    1658.099\n",
       "vagas_estacionamento  1470.6969     22.762     64.611      0.000    1426.077    1515.317\n",
       "==============================================================================\n",
       "Omnibus:                     2646.762   Durbin-Watson:                   2.005\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             9528.355\n",
       "Skew:                           1.596   Prob(JB):                         0.00\n",
       "Kurtosis:                       7.194   Cond. No.                         3.24\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Agora para a variável número de quartos\n",
    "\n",
    "model_estac = sm.OLS.from_formula(\"aluguel ~ vagas_estacionamento\", data=df)\n",
    "resultado_estac = model_estac.fit()\n",
    "resultado_estac.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8231, 14)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>aluguel</td>     <th>  R-squared:         </th> <td>   0.400</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.400</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   712.3</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 17 Aug 2020</td> <th>  Prob (F-statistic):</th>  <td>  0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:57:09</td>     <th>  Log-Likelihood:    </th> <td> -39746.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  4273</td>      <th>  AIC:               </th> <td>7.950e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  4268</td>      <th>  BIC:               </th> <td>7.953e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     4</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "            <td></td>              <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>            <td> 1102.6723</td> <td>  103.764</td> <td>   10.627</td> <td> 0.000</td> <td>  899.241</td> <td> 1306.103</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>area</th>                 <td>    0.3479</td> <td>    0.108</td> <td>    3.224</td> <td> 0.001</td> <td>    0.136</td> <td>    0.559</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>quartos</th>              <td>  -95.0945</td> <td>   62.112</td> <td>   -1.531</td> <td> 0.126</td> <td> -216.866</td> <td>   26.677</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>banheiros</th>            <td> 1126.6171</td> <td>   53.753</td> <td>   20.959</td> <td> 0.000</td> <td> 1021.234</td> <td> 1232.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>vagas_estacionamento</th> <td>  560.8060</td> <td>   47.944</td> <td>   11.697</td> <td> 0.000</td> <td>  466.811</td> <td>  654.801</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>904.719</td> <th>  Durbin-Watson:     </th> <td>   2.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>2495.034</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.118</td>  <th>  Prob(JB):          </th> <td>    0.00</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 6.002</td>  <th>  Cond. No.          </th> <td>1.15e+03</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 1.15e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                aluguel   R-squared:                       0.400\n",
       "Model:                            OLS   Adj. R-squared:                  0.400\n",
       "Method:                 Least Squares   F-statistic:                     712.3\n",
       "Date:                Mon, 17 Aug 2020   Prob (F-statistic):               0.00\n",
       "Time:                        13:57:09   Log-Likelihood:                -39746.\n",
       "No. Observations:                4273   AIC:                         7.950e+04\n",
       "Df Residuals:                    4268   BIC:                         7.953e+04\n",
       "Df Model:                           4                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================\n",
       "                           coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------------\n",
       "Intercept             1102.6723    103.764     10.627      0.000     899.241    1306.103\n",
       "area                     0.3479      0.108      3.224      0.001       0.136       0.559\n",
       "quartos                -95.0945     62.112     -1.531      0.126    -216.866      26.677\n",
       "banheiros             1126.6171     53.753     20.959      0.000    1021.234    1232.000\n",
       "vagas_estacionamento   560.8060     47.944     11.697      0.000     466.811     654.801\n",
       "==============================================================================\n",
       "Omnibus:                      904.719   Durbin-Watson:                   2.000\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             2495.034\n",
       "Skew:                           1.118   Prob(JB):                         0.00\n",
       "Kurtosis:                       6.002   Cond. No.                     1.15e+03\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 1.15e+03. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = sm.OLS.from_formula(\"aluguel ~ area + quartos + banheiros + vagas_estacionamento\", data=df[df.cidade == 'São Paulo'])\n",
    "resultado = model.fit()\n",
    "resultado.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3582.276394119791"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.aluguel.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.34790785327610263"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "resultado.params['area']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>aluguel</td>     <th>  R-squared:         </th> <td>   0.036</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.036</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   159.1</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 17 Aug 2020</td> <th>  Prob (F-statistic):</th> <td>7.51e-36</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:57:09</td>     <th>  Log-Likelihood:    </th> <td> -40760.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  4273</td>      <th>  AIC:               </th> <td>8.152e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  4271</td>      <th>  BIC:               </th> <td>8.154e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td> 4237.7529</td> <td>   54.387</td> <td>   77.918</td> <td> 0.000</td> <td> 4131.126</td> <td> 4344.380</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>area</th>      <td>    1.6686</td> <td>    0.132</td> <td>   12.615</td> <td> 0.000</td> <td>    1.409</td> <td>    1.928</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>1153.220</td> <th>  Durbin-Watson:     </th> <td>   2.046</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>6105.074</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 1.188</td>  <th>  Prob(JB):          </th> <td>    0.00</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td> 8.353</td>  <th>  Cond. No.          </th> <td>    435.</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                aluguel   R-squared:                       0.036\n",
       "Model:                            OLS   Adj. R-squared:                  0.036\n",
       "Method:                 Least Squares   F-statistic:                     159.1\n",
       "Date:                Mon, 17 Aug 2020   Prob (F-statistic):           7.51e-36\n",
       "Time:                        13:57:09   Log-Likelihood:                -40760.\n",
       "No. Observations:                4273   AIC:                         8.152e+04\n",
       "Df Residuals:                    4271   BIC:                         8.154e+04\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept   4237.7529     54.387     77.918      0.000    4131.126    4344.380\n",
       "area           1.6686      0.132     12.615      0.000       1.409       1.928\n",
       "==============================================================================\n",
       "Omnibus:                     1153.220   Durbin-Watson:                   2.046\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             6105.074\n",
       "Skew:                           1.188   Prob(JB):                         0.00\n",
       "Kurtosis:                       8.353   Cond. No.                         435.\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Regressao com minimos quadrados entre aluguel e área\n",
    "\n",
    "model_quartos = sm.OLS.from_formula(\"aluguel ~ area\", data=df[df.cidade == 'São Paulo'])\n",
    "resultado_area = model_quartos.fit()\n",
    "resultado_area.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split \n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn import metrics\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Vamos construir o modelo para São Paulo\n",
    "\n",
    "df_sp = df[df.cidade == 'São Paulo']\n",
    "\n",
    "X = df_sp[['area', 'quartos', 'banheiros', 'vagas_estacionamento', 'andar', 'animal', 'mobiliado']].values\n",
    "\n",
    "y = df_sp['aluguel']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modelo = LinearRegression()\n",
    "modelo.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = modelo.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 1672.480404687216\n",
      "Mean Squared Error: 5744853.973156959\n",
      "Root Mean Squared Error: 2396.8425006989837\n"
     ]
    }
   ],
   "source": [
    "print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \n",
    "print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \n",
    "print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Actual</th>\n",
       "      <th>Predicted</th>\n",
       "      <th>Error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>5347</td>\n",
       "      <td>2985</td>\n",
       "      <td>3123.833582</td>\n",
       "      <td>-4.651041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>355</td>\n",
       "      <td>2100</td>\n",
       "      <td>2330.602690</td>\n",
       "      <td>-10.981080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6410</td>\n",
       "      <td>2570</td>\n",
       "      <td>3572.425870</td>\n",
       "      <td>-39.004898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>310</td>\n",
       "      <td>1510</td>\n",
       "      <td>3280.739909</td>\n",
       "      <td>-117.267544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6222</td>\n",
       "      <td>5100</td>\n",
       "      <td>9011.782537</td>\n",
       "      <td>-76.701618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6742</td>\n",
       "      <td>3040</td>\n",
       "      <td>3767.516860</td>\n",
       "      <td>-23.931476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8192</td>\n",
       "      <td>1900</td>\n",
       "      <td>3449.259916</td>\n",
       "      <td>-81.539996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3392</td>\n",
       "      <td>12000</td>\n",
       "      <td>4790.937172</td>\n",
       "      <td>60.075524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9835</td>\n",
       "      <td>3500</td>\n",
       "      <td>2643.862641</td>\n",
       "      <td>24.461067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1739</td>\n",
       "      <td>8500</td>\n",
       "      <td>10228.972339</td>\n",
       "      <td>-20.340851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3724</td>\n",
       "      <td>1400</td>\n",
       "      <td>1340.902765</td>\n",
       "      <td>4.221231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2232</td>\n",
       "      <td>5500</td>\n",
       "      <td>5863.368231</td>\n",
       "      <td>-6.606695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6221</td>\n",
       "      <td>3700</td>\n",
       "      <td>3473.065944</td>\n",
       "      <td>6.133353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5932</td>\n",
       "      <td>900</td>\n",
       "      <td>1562.202239</td>\n",
       "      <td>-73.578027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>90</td>\n",
       "      <td>9000</td>\n",
       "      <td>7134.142205</td>\n",
       "      <td>20.731753</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6758</td>\n",
       "      <td>2650</td>\n",
       "      <td>3490.282630</td>\n",
       "      <td>-31.708778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7554</td>\n",
       "      <td>4650</td>\n",
       "      <td>4640.420521</td>\n",
       "      <td>0.206010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2271</td>\n",
       "      <td>9100</td>\n",
       "      <td>7930.459157</td>\n",
       "      <td>12.852097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9286</td>\n",
       "      <td>1700</td>\n",
       "      <td>2012.335246</td>\n",
       "      <td>-18.372662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8668</td>\n",
       "      <td>2156</td>\n",
       "      <td>2045.184210</td>\n",
       "      <td>5.139879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5203</td>\n",
       "      <td>7000</td>\n",
       "      <td>3818.818828</td>\n",
       "      <td>45.445445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9930</td>\n",
       "      <td>1700</td>\n",
       "      <td>1705.737242</td>\n",
       "      <td>-0.337485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2278</td>\n",
       "      <td>5500</td>\n",
       "      <td>5400.103316</td>\n",
       "      <td>1.816303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2267</td>\n",
       "      <td>7000</td>\n",
       "      <td>5864.979163</td>\n",
       "      <td>16.214583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>738</td>\n",
       "      <td>1800</td>\n",
       "      <td>2005.485714</td>\n",
       "      <td>-11.415873</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Actual     Predicted       Error\n",
       "5347    2985   3123.833582   -4.651041\n",
       "355     2100   2330.602690  -10.981080\n",
       "6410    2570   3572.425870  -39.004898\n",
       "310     1510   3280.739909 -117.267544\n",
       "6222    5100   9011.782537  -76.701618\n",
       "6742    3040   3767.516860  -23.931476\n",
       "8192    1900   3449.259916  -81.539996\n",
       "3392   12000   4790.937172   60.075524\n",
       "9835    3500   2643.862641   24.461067\n",
       "1739    8500  10228.972339  -20.340851\n",
       "3724    1400   1340.902765    4.221231\n",
       "2232    5500   5863.368231   -6.606695\n",
       "6221    3700   3473.065944    6.133353\n",
       "5932     900   1562.202239  -73.578027\n",
       "90      9000   7134.142205   20.731753\n",
       "6758    2650   3490.282630  -31.708778\n",
       "7554    4650   4640.420521    0.206010\n",
       "2271    9100   7930.459157   12.852097\n",
       "9286    1700   2012.335246  -18.372662\n",
       "8668    2156   2045.184210    5.139879\n",
       "5203    7000   3818.818828   45.445445\n",
       "9930    1700   1705.737242   -0.337485\n",
       "2278    5500   5400.103316    1.816303\n",
       "2267    7000   5864.979163   16.214583\n",
       "738     1800   2005.485714  -11.415873"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_model = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred, 'Error': ((y_test-y_pred)/y_test*100)})\n",
    "df_model.head(25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Este modelo o modelo de predição de preço possui uma precisão baixa. É possível que isso se dê pela falta de dados, como bairros dos imóveis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
